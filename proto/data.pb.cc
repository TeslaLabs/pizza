// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class Mesh_VertexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mesh_Vertex> {};
Mesh_VertexDefaultTypeInternal _Mesh_Vertex_default_instance_;
class Mesh_FaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mesh_Face> {};
Mesh_FaceDefaultTypeInternal _Mesh_Face_default_instance_;
class MeshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mesh> {};
MeshDefaultTypeInternal _Mesh_default_instance_;
class ShaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Shader> {};
ShaderDefaultTypeInternal _Shader_default_instance_;
class DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Data> {};
DataDefaultTypeInternal _Data_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_data_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_data_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, v_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, c_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, face_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, source_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, shader_),
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Mesh_Vertex)},
  { 12, -1, sizeof(Mesh_Face)},
  { 19, -1, sizeof(Mesh)},
  { 26, -1, sizeof(Shader)},
  { 33, -1, sizeof(Data)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Mesh_Vertex_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Mesh_Face_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Mesh_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Shader_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Data_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_data_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "data.proto", schemas, file_default_instances, protobuf_Offsets_data_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  _Mesh_Vertex_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Mesh_Face_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Mesh_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Shader_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Data_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void protobuf_InitDefaults_data_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Mesh_Vertex_default_instance_.DefaultConstruct();
  _Mesh_Face_default_instance_.DefaultConstruct();
  _Mesh_default_instance_.DefaultConstruct();
  _Shader_default_instance_.DefaultConstruct();
  _Data_default_instance_.DefaultConstruct();
}

void protobuf_InitDefaults_data_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_data_2eproto_impl);
}
void protobuf_AddDesc_data_2eproto_impl() {
  protobuf_InitDefaults_data_2eproto();
  static const char descriptor[] = {
      "\n\ndata.proto\"\327\001\n\004Mesh\022\014\n\004name\030\001 \001(\t\022\034\n\006v"
      "ertex\030\002 \003(\0132\014.Mesh.Vertex\022\030\n\004face\030\003 \003(\0132"
      "\n.Mesh.Face\032`\n\006Vertex\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
      "\001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001i\030\004 \001(\002\022\t\n\001j\030\005 \001(\002\022\t\n\001"
      "k\030\007 \001(\002\022\t\n\001u\030\010 \001(\002\022\t\n\001v\030\t \001(\002\032\'\n\004Face\022\t\n"
      "\001a\030\001 \001(\r\022\t\n\001b\030\002 \001(\r\022\t\n\001c\030\003 \001(\r\"4\n\006Shader"
      "\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006source\030\003"
      " \001(\t\"4\n\004Data\022\023\n\004mesh\030\001 \003(\0132\005.Mesh\022\027\n\006sha"
      "der\030\002 \003(\0132\007.Shaderb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_data_2eproto_once_);
void protobuf_AddDesc_data_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_data_2eproto_once_,
                 &protobuf_AddDesc_data_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh_Vertex::kXFieldNumber;
const int Mesh_Vertex::kYFieldNumber;
const int Mesh_Vertex::kZFieldNumber;
const int Mesh_Vertex::kIFieldNumber;
const int Mesh_Vertex::kJFieldNumber;
const int Mesh_Vertex::kKFieldNumber;
const int Mesh_Vertex::kUFieldNumber;
const int Mesh_Vertex::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh_Vertex::Mesh_Vertex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_data_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh.Vertex)
}
Mesh_Vertex::Mesh_Vertex(const Mesh_Vertex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&x_) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:Mesh.Vertex)
}

void Mesh_Vertex::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&x_) + sizeof(v_));
  _cached_size_ = 0;
}

Mesh_Vertex::~Mesh_Vertex() {
  // @@protoc_insertion_point(destructor:Mesh.Vertex)
  SharedDtor();
}

void Mesh_Vertex::SharedDtor() {
}

void Mesh_Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh_Vertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const Mesh_Vertex& Mesh_Vertex::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

Mesh_Vertex* Mesh_Vertex::New(::google::protobuf::Arena* arena) const {
  Mesh_Vertex* n = new Mesh_Vertex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh_Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh.Vertex)
  ::memset(&x_, 0, reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&x_) + sizeof(v_));
}

bool Mesh_Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh.Vertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float i = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float j = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &j_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float k = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float u = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float v = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh.Vertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh.Vertex)
  return false;
#undef DO_
}

void Mesh_Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh.Vertex)
  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float i = 4;
  if (this->i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->i(), output);
  }

  // float j = 5;
  if (this->j() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->j(), output);
  }

  // float k = 7;
  if (this->k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->k(), output);
  }

  // float u = 8;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->u(), output);
  }

  // float v = 9;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->v(), output);
  }

  // @@protoc_insertion_point(serialize_end:Mesh.Vertex)
}

::google::protobuf::uint8* Mesh_Vertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh.Vertex)
  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float i = 4;
  if (this->i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->i(), target);
  }

  // float j = 5;
  if (this->j() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->j(), target);
  }

  // float k = 7;
  if (this->k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->k(), target);
  }

  // float u = 8;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->u(), target);
  }

  // float v = 9;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->v(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Mesh.Vertex)
  return target;
}

size_t Mesh_Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh.Vertex)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float i = 4;
  if (this->i() != 0) {
    total_size += 1 + 4;
  }

  // float j = 5;
  if (this->j() != 0) {
    total_size += 1 + 4;
  }

  // float k = 7;
  if (this->k() != 0) {
    total_size += 1 + 4;
  }

  // float u = 8;
  if (this->u() != 0) {
    total_size += 1 + 4;
  }

  // float v = 9;
  if (this->v() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh_Vertex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh_Vertex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh_Vertex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh.Vertex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh.Vertex)
    MergeFrom(*source);
  }
}

void Mesh_Vertex::MergeFrom(const Mesh_Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.i() != 0) {
    set_i(from.i());
  }
  if (from.j() != 0) {
    set_j(from.j());
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
}

void Mesh_Vertex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh_Vertex::CopyFrom(const Mesh_Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh_Vertex::IsInitialized() const {
  return true;
}

void Mesh_Vertex::Swap(Mesh_Vertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh_Vertex::InternalSwap(Mesh_Vertex* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(i_, other->i_);
  std::swap(j_, other->j_);
  std::swap(k_, other->k_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh_Vertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh_Vertex

// float x = 1;
void Mesh_Vertex::clear_x() {
  x_ = 0;
}
float Mesh_Vertex::x() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.x)
  return x_;
}
void Mesh_Vertex::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.x)
}

// float y = 2;
void Mesh_Vertex::clear_y() {
  y_ = 0;
}
float Mesh_Vertex::y() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.y)
  return y_;
}
void Mesh_Vertex::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.y)
}

// float z = 3;
void Mesh_Vertex::clear_z() {
  z_ = 0;
}
float Mesh_Vertex::z() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.z)
  return z_;
}
void Mesh_Vertex::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.z)
}

// float i = 4;
void Mesh_Vertex::clear_i() {
  i_ = 0;
}
float Mesh_Vertex::i() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.i)
  return i_;
}
void Mesh_Vertex::set_i(float value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.i)
}

// float j = 5;
void Mesh_Vertex::clear_j() {
  j_ = 0;
}
float Mesh_Vertex::j() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.j)
  return j_;
}
void Mesh_Vertex::set_j(float value) {
  
  j_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.j)
}

// float k = 7;
void Mesh_Vertex::clear_k() {
  k_ = 0;
}
float Mesh_Vertex::k() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.k)
  return k_;
}
void Mesh_Vertex::set_k(float value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.k)
}

// float u = 8;
void Mesh_Vertex::clear_u() {
  u_ = 0;
}
float Mesh_Vertex::u() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.u)
  return u_;
}
void Mesh_Vertex::set_u(float value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.u)
}

// float v = 9;
void Mesh_Vertex::clear_v() {
  v_ = 0;
}
float Mesh_Vertex::v() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.v)
  return v_;
}
void Mesh_Vertex::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh_Face::kAFieldNumber;
const int Mesh_Face::kBFieldNumber;
const int Mesh_Face::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh_Face::Mesh_Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_data_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh.Face)
}
Mesh_Face::Mesh_Face(const Mesh_Face& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:Mesh.Face)
}

void Mesh_Face::SharedCtor() {
  ::memset(&a_, 0, reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
  _cached_size_ = 0;
}

Mesh_Face::~Mesh_Face() {
  // @@protoc_insertion_point(destructor:Mesh.Face)
  SharedDtor();
}

void Mesh_Face::SharedDtor() {
}

void Mesh_Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh_Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const Mesh_Face& Mesh_Face::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

Mesh_Face* Mesh_Face::New(::google::protobuf::Arena* arena) const {
  Mesh_Face* n = new Mesh_Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh_Face::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh.Face)
  ::memset(&a_, 0, reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
}

bool Mesh_Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 a = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 b = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 c = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh.Face)
  return false;
#undef DO_
}

void Mesh_Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh.Face)
  // uint32 a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a(), output);
  }

  // uint32 b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->b(), output);
  }

  // uint32 c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c(), output);
  }

  // @@protoc_insertion_point(serialize_end:Mesh.Face)
}

::google::protobuf::uint8* Mesh_Face::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh.Face)
  // uint32 a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a(), target);
  }

  // uint32 b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->b(), target);
  }

  // uint32 c = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Mesh.Face)
  return target;
}

size_t Mesh_Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh.Face)
  size_t total_size = 0;

  // uint32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a());
  }

  // uint32 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  // uint32 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh_Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh.Face)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh_Face* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh_Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh.Face)
    MergeFrom(*source);
  }
}

void Mesh_Face::MergeFrom(const Mesh_Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh.Face)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
}

void Mesh_Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh_Face::CopyFrom(const Mesh_Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh_Face::IsInitialized() const {
  return true;
}

void Mesh_Face::Swap(Mesh_Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh_Face::InternalSwap(Mesh_Face* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(c_, other->c_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh_Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh_Face

// uint32 a = 1;
void Mesh_Face::clear_a() {
  a_ = 0u;
}
::google::protobuf::uint32 Mesh_Face::a() const {
  // @@protoc_insertion_point(field_get:Mesh.Face.a)
  return a_;
}
void Mesh_Face::set_a(::google::protobuf::uint32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Face.a)
}

// uint32 b = 2;
void Mesh_Face::clear_b() {
  b_ = 0u;
}
::google::protobuf::uint32 Mesh_Face::b() const {
  // @@protoc_insertion_point(field_get:Mesh.Face.b)
  return b_;
}
void Mesh_Face::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Face.b)
}

// uint32 c = 3;
void Mesh_Face::clear_c() {
  c_ = 0u;
}
::google::protobuf::uint32 Mesh_Face::c() const {
  // @@protoc_insertion_point(field_get:Mesh.Face.c)
  return c_;
}
void Mesh_Face::set_c(::google::protobuf::uint32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Face.c)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kNameFieldNumber;
const int Mesh::kVertexFieldNumber;
const int Mesh::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_data_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vertex_(from.vertex_),
      face_(from.face_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Mesh)
}

void Mesh::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const Mesh& Mesh::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

Mesh* Mesh::New(::google::protobuf::Arena* arena) const {
  Mesh* n = new Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh)
  vertex_.Clear();
  face_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Mesh.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mesh.Vertex vertex = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Mesh.Face face = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_face()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Mesh.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Mesh.Vertex vertex = 2;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertex(i), output);
  }

  // repeated .Mesh.Face face = 3;
  for (unsigned int i = 0, n = this->face_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->face(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Mesh)
}

::google::protobuf::uint8* Mesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Mesh.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Mesh.Vertex vertex = 2;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->vertex(i), false, target);
  }

  // repeated .Mesh.Face face = 3;
  for (unsigned int i = 0, n = this->face_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->face(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh)
  size_t total_size = 0;

  // repeated .Mesh.Vertex vertex = 2;
  {
    unsigned int count = this->vertex_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertex(i));
    }
  }

  // repeated .Mesh.Face face = 3;
  {
    unsigned int count = this->face_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->face(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vertex_.MergeFrom(from.vertex_);
  face_.MergeFrom(from.face_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  vertex_.UnsafeArenaSwap(&other->vertex_);
  face_.UnsafeArenaSwap(&other->face_);
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh

// string name = 1;
void Mesh::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::name() const {
  // @@protoc_insertion_point(field_get:Mesh.name)
  return name_.GetNoArena();
}
void Mesh::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mesh.name)
}
#if LANG_CXX11
void Mesh::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mesh.name)
}
#endif
void Mesh::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mesh.name)
}
void Mesh::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mesh.name)
}
::std::string* Mesh::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Mesh.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_name() {
  // @@protoc_insertion_point(field_release:Mesh.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mesh.name)
}

// repeated .Mesh.Vertex vertex = 2;
int Mesh::vertex_size() const {
  return vertex_.size();
}
void Mesh::clear_vertex() {
  vertex_.Clear();
}
const ::Mesh_Vertex& Mesh::vertex(int index) const {
  // @@protoc_insertion_point(field_get:Mesh.vertex)
  return vertex_.Get(index);
}
::Mesh_Vertex* Mesh::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:Mesh.vertex)
  return vertex_.Mutable(index);
}
::Mesh_Vertex* Mesh::add_vertex() {
  // @@protoc_insertion_point(field_add:Mesh.vertex)
  return vertex_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mesh_Vertex >*
Mesh::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:Mesh.vertex)
  return &vertex_;
}
const ::google::protobuf::RepeatedPtrField< ::Mesh_Vertex >&
Mesh::vertex() const {
  // @@protoc_insertion_point(field_list:Mesh.vertex)
  return vertex_;
}

// repeated .Mesh.Face face = 3;
int Mesh::face_size() const {
  return face_.size();
}
void Mesh::clear_face() {
  face_.Clear();
}
const ::Mesh_Face& Mesh::face(int index) const {
  // @@protoc_insertion_point(field_get:Mesh.face)
  return face_.Get(index);
}
::Mesh_Face* Mesh::mutable_face(int index) {
  // @@protoc_insertion_point(field_mutable:Mesh.face)
  return face_.Mutable(index);
}
::Mesh_Face* Mesh::add_face() {
  // @@protoc_insertion_point(field_add:Mesh.face)
  return face_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mesh_Face >*
Mesh::mutable_face() {
  // @@protoc_insertion_point(field_mutable_list:Mesh.face)
  return &face_;
}
const ::google::protobuf::RepeatedPtrField< ::Mesh_Face >&
Mesh::face() const {
  // @@protoc_insertion_point(field_list:Mesh.face)
  return face_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shader::kTypeFieldNumber;
const int Shader::kNameFieldNumber;
const int Shader::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shader::Shader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_data_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shader)
}
Shader::Shader(const Shader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  // @@protoc_insertion_point(copy_constructor:Shader)
}

void Shader::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Shader::~Shader() {
  // @@protoc_insertion_point(destructor:Shader)
  SharedDtor();
}

void Shader::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Shader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const Shader& Shader::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

Shader* Shader::New(::google::protobuf::Arena* arena) const {
  Shader* n = new Shader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shader::Clear() {
// @@protoc_insertion_point(message_clear_start:Shader)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Shader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shader.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shader.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shader)
  return false;
#undef DO_
}

void Shader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shader)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // @@protoc_insertion_point(serialize_end:Shader)
}

::google::protobuf::uint8* Shader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Shader)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Shader)
  return target;
}

size_t Shader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shader)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Shader)
  GOOGLE_DCHECK_NE(&from, this);
  const Shader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Shader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Shader)
    MergeFrom(*source);
  }
}

void Shader::MergeFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Shader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void Shader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shader::CopyFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shader::IsInitialized() const {
  return true;
}

void Shader::Swap(Shader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shader::InternalSwap(Shader* other) {
  type_.Swap(&other->type_);
  name_.Swap(&other->name_);
  source_.Swap(&other->source_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shader

// string type = 1;
void Shader::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Shader::type() const {
  // @@protoc_insertion_point(field_get:Shader.type)
  return type_.GetNoArena();
}
void Shader::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shader.type)
}
#if LANG_CXX11
void Shader::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Shader.type)
}
#endif
void Shader::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shader.type)
}
void Shader::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shader.type)
}
::std::string* Shader::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Shader.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Shader::release_type() {
  // @@protoc_insertion_point(field_release:Shader.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Shader.type)
}

// string name = 2;
void Shader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Shader::name() const {
  // @@protoc_insertion_point(field_get:Shader.name)
  return name_.GetNoArena();
}
void Shader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shader.name)
}
#if LANG_CXX11
void Shader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Shader.name)
}
#endif
void Shader::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shader.name)
}
void Shader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shader.name)
}
::std::string* Shader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Shader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Shader::release_name() {
  // @@protoc_insertion_point(field_release:Shader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Shader.name)
}

// string source = 3;
void Shader::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Shader::source() const {
  // @@protoc_insertion_point(field_get:Shader.source)
  return source_.GetNoArena();
}
void Shader::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shader.source)
}
#if LANG_CXX11
void Shader::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Shader.source)
}
#endif
void Shader::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shader.source)
}
void Shader::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shader.source)
}
::std::string* Shader::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:Shader.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Shader::release_source() {
  // @@protoc_insertion_point(field_release:Shader.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:Shader.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kMeshFieldNumber;
const int Data::kShaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_data_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mesh_(from.mesh_),
      shader_(from.shader_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const Data& Data::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Data)
  mesh_.Clear();
  shader_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mesh mesh = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Shader shader = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shader()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data)
  // repeated .Mesh mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mesh(i), output);
  }

  // repeated .Shader shader = 2;
  for (unsigned int i = 0, n = this->shader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shader(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Data)
  // repeated .Mesh mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mesh(i), false, target);
  }

  // repeated .Shader shader = 2;
  for (unsigned int i = 0, n = this->shader_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->shader(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data)
  size_t total_size = 0;

  // repeated .Mesh mesh = 1;
  {
    unsigned int count = this->mesh_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh(i));
    }
  }

  // repeated .Shader shader = 2;
  {
    unsigned int count = this->shader_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shader(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mesh_.MergeFrom(from.mesh_);
  shader_.MergeFrom(from.shader_);
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  mesh_.UnsafeArenaSwap(&other->mesh_);
  shader_.UnsafeArenaSwap(&other->shader_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// repeated .Mesh mesh = 1;
int Data::mesh_size() const {
  return mesh_.size();
}
void Data::clear_mesh() {
  mesh_.Clear();
}
const ::Mesh& Data::mesh(int index) const {
  // @@protoc_insertion_point(field_get:Data.mesh)
  return mesh_.Get(index);
}
::Mesh* Data::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:Data.mesh)
  return mesh_.Mutable(index);
}
::Mesh* Data::add_mesh() {
  // @@protoc_insertion_point(field_add:Data.mesh)
  return mesh_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mesh >*
Data::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:Data.mesh)
  return &mesh_;
}
const ::google::protobuf::RepeatedPtrField< ::Mesh >&
Data::mesh() const {
  // @@protoc_insertion_point(field_list:Data.mesh)
  return mesh_;
}

// repeated .Shader shader = 2;
int Data::shader_size() const {
  return shader_.size();
}
void Data::clear_shader() {
  shader_.Clear();
}
const ::Shader& Data::shader(int index) const {
  // @@protoc_insertion_point(field_get:Data.shader)
  return shader_.Get(index);
}
::Shader* Data::mutable_shader(int index) {
  // @@protoc_insertion_point(field_mutable:Data.shader)
  return shader_.Mutable(index);
}
::Shader* Data::add_shader() {
  // @@protoc_insertion_point(field_add:Data.shader)
  return shader_.Add();
}
::google::protobuf::RepeatedPtrField< ::Shader >*
Data::mutable_shader() {
  // @@protoc_insertion_point(field_mutable_list:Data.shader)
  return &shader_;
}
const ::google::protobuf::RepeatedPtrField< ::Shader >&
Data::shader() const {
  // @@protoc_insertion_point(field_list:Data.shader)
  return shader_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
