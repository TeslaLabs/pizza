// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Mesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh_Vertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_Vertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh_Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  Mesh_descriptor_ = file->message_type(0);
  static const int Mesh_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, face_),
  };
  Mesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mesh_descriptor_,
      Mesh::internal_default_instance(),
      Mesh_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _internal_metadata_));
  Mesh_Vertex_descriptor_ = Mesh_descriptor_->nested_type(0);
  static const int Mesh_Vertex_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, v_),
  };
  Mesh_Vertex_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mesh_Vertex_descriptor_,
      Mesh_Vertex::internal_default_instance(),
      Mesh_Vertex_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mesh_Vertex),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, _internal_metadata_));
  Mesh_Face_descriptor_ = Mesh_descriptor_->nested_type(1);
  static const int Mesh_Face_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, c_),
  };
  Mesh_Face_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mesh_Face_descriptor_,
      Mesh_Face::internal_default_instance(),
      Mesh_Face_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mesh_Face),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Face, _internal_metadata_));
  Shader_descriptor_ = file->message_type(1);
  static const int Shader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, source_),
  };
  Shader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Shader_descriptor_,
      Shader::internal_default_instance(),
      Shader_offsets_,
      -1,
      -1,
      -1,
      sizeof(Shader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shader, _internal_metadata_));
  Data_descriptor_ = file->message_type(2);
  static const int Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, shader_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::internal_default_instance(),
      Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mesh_descriptor_, Mesh::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mesh_Vertex_descriptor_, Mesh_Vertex::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mesh_Face_descriptor_, Mesh_Face::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Shader_descriptor_, Shader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, Data::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  Mesh_default_instance_.Shutdown();
  delete Mesh_reflection_;
  Mesh_Vertex_default_instance_.Shutdown();
  delete Mesh_Vertex_reflection_;
  Mesh_Face_default_instance_.Shutdown();
  delete Mesh_Face_reflection_;
  Shader_default_instance_.Shutdown();
  delete Shader_reflection_;
  Data_default_instance_.Shutdown();
  delete Data_reflection_;
}

void protobuf_InitDefaults_data_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Mesh_default_instance_.DefaultConstruct();
  Mesh_Vertex_default_instance_.DefaultConstruct();
  Mesh_Face_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Shader_default_instance_.DefaultConstruct();
  Data_default_instance_.DefaultConstruct();
  Mesh_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mesh_Vertex_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mesh_Face_default_instance_.get_mutable()->InitAsDefaultInstance();
  Shader_default_instance_.get_mutable()->InitAsDefaultInstance();
  Data_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_data_2eproto_once_);
void protobuf_InitDefaults_data_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_data_2eproto_once_,
                 &protobuf_InitDefaults_data_2eproto_impl);
}
void protobuf_AddDesc_data_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_data_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\"\327\001\n\004Mesh\022\014\n\004name\030\001 \001(\t\022\034\n\006v"
    "ertex\030\002 \003(\0132\014.Mesh.Vertex\022\030\n\004face\030\003 \003(\0132"
    "\n.Mesh.Face\032`\n\006Vertex\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
    "\001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001i\030\004 \001(\002\022\t\n\001j\030\005 \001(\002\022\t\n\001"
    "k\030\007 \001(\002\022\t\n\001u\030\010 \001(\002\022\t\n\001v\030\t \001(\002\032\'\n\004Face\022\t\n"
    "\001a\030\001 \001(\r\022\t\n\001b\030\002 \001(\r\022\t\n\001c\030\003 \001(\r\"4\n\006Shader"
    "\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006source\030\003"
    " \001(\t\"4\n\004Data\022\023\n\004mesh\030\001 \003(\0132\005.Mesh\022\027\n\006sha"
    "der\030\002 \003(\0132\007.Shaderb\006proto3", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_data_2eproto_once_);
void protobuf_AddDesc_data_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_data_2eproto_once_,
                 &protobuf_AddDesc_data_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh_Vertex::kXFieldNumber;
const int Mesh_Vertex::kYFieldNumber;
const int Mesh_Vertex::kZFieldNumber;
const int Mesh_Vertex::kIFieldNumber;
const int Mesh_Vertex::kJFieldNumber;
const int Mesh_Vertex::kKFieldNumber;
const int Mesh_Vertex::kUFieldNumber;
const int Mesh_Vertex::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh_Vertex::Mesh_Vertex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_data_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh.Vertex)
}

void Mesh_Vertex::InitAsDefaultInstance() {
}

Mesh_Vertex::Mesh_Vertex(const Mesh_Vertex& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mesh.Vertex)
}

void Mesh_Vertex::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&x_) + sizeof(v_));
  _cached_size_ = 0;
}

Mesh_Vertex::~Mesh_Vertex() {
  // @@protoc_insertion_point(destructor:Mesh.Vertex)
  SharedDtor();
}

void Mesh_Vertex::SharedDtor() {
}

void Mesh_Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh_Vertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_Vertex_descriptor_;
}

const Mesh_Vertex& Mesh_Vertex::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mesh_Vertex> Mesh_Vertex_default_instance_;

Mesh_Vertex* Mesh_Vertex::New(::google::protobuf::Arena* arena) const {
  Mesh_Vertex* n = new Mesh_Vertex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh_Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh.Vertex)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mesh_Vertex, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mesh_Vertex*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, v_);

#undef ZR_HELPER_
#undef ZR_

}

bool Mesh_Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh.Vertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_i;
        break;
      }

      // optional float i = 4;
      case 4: {
        if (tag == 37) {
         parse_i:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_j;
        break;
      }

      // optional float j = 5;
      case 5: {
        if (tag == 45) {
         parse_j:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &j_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_k;
        break;
      }

      // optional float k = 7;
      case 7: {
        if (tag == 61) {
         parse_k:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_u;
        break;
      }

      // optional float u = 8;
      case 8: {
        if (tag == 69) {
         parse_u:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_v;
        break;
      }

      // optional float v = 9;
      case 9: {
        if (tag == 77) {
         parse_v:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh.Vertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh.Vertex)
  return false;
#undef DO_
}

void Mesh_Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh.Vertex)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float i = 4;
  if (this->i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->i(), output);
  }

  // optional float j = 5;
  if (this->j() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->j(), output);
  }

  // optional float k = 7;
  if (this->k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->k(), output);
  }

  // optional float u = 8;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->u(), output);
  }

  // optional float v = 9;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->v(), output);
  }

  // @@protoc_insertion_point(serialize_end:Mesh.Vertex)
}

::google::protobuf::uint8* Mesh_Vertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh.Vertex)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float i = 4;
  if (this->i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->i(), target);
  }

  // optional float j = 5;
  if (this->j() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->j(), target);
  }

  // optional float k = 7;
  if (this->k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->k(), target);
  }

  // optional float u = 8;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->u(), target);
  }

  // optional float v = 9;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->v(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Mesh.Vertex)
  return target;
}

size_t Mesh_Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh.Vertex)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float i = 4;
  if (this->i() != 0) {
    total_size += 1 + 4;
  }

  // optional float j = 5;
  if (this->j() != 0) {
    total_size += 1 + 4;
  }

  // optional float k = 7;
  if (this->k() != 0) {
    total_size += 1 + 4;
  }

  // optional float u = 8;
  if (this->u() != 0) {
    total_size += 1 + 4;
  }

  // optional float v = 9;
  if (this->v() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh_Vertex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh.Vertex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mesh_Vertex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh_Vertex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh.Vertex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh.Vertex)
    UnsafeMergeFrom(*source);
  }
}

void Mesh_Vertex::MergeFrom(const Mesh_Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh.Vertex)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mesh_Vertex::UnsafeMergeFrom(const Mesh_Vertex& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.i() != 0) {
    set_i(from.i());
  }
  if (from.j() != 0) {
    set_j(from.j());
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
}

void Mesh_Vertex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh_Vertex::CopyFrom(const Mesh_Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh.Vertex)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mesh_Vertex::IsInitialized() const {

  return true;
}

void Mesh_Vertex::Swap(Mesh_Vertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh_Vertex::InternalSwap(Mesh_Vertex* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(i_, other->i_);
  std::swap(j_, other->j_);
  std::swap(k_, other->k_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh_Vertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_Vertex_descriptor_;
  metadata.reflection = Mesh_Vertex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh_Face::kAFieldNumber;
const int Mesh_Face::kBFieldNumber;
const int Mesh_Face::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh_Face::Mesh_Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_data_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh.Face)
}

void Mesh_Face::InitAsDefaultInstance() {
}

Mesh_Face::Mesh_Face(const Mesh_Face& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mesh.Face)
}

void Mesh_Face::SharedCtor() {
  ::memset(&a_, 0, reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_) + sizeof(c_));
  _cached_size_ = 0;
}

Mesh_Face::~Mesh_Face() {
  // @@protoc_insertion_point(destructor:Mesh.Face)
  SharedDtor();
}

void Mesh_Face::SharedDtor() {
}

void Mesh_Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh_Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_Face_descriptor_;
}

const Mesh_Face& Mesh_Face::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mesh_Face> Mesh_Face_default_instance_;

Mesh_Face* Mesh_Face::New(::google::protobuf::Arena* arena) const {
  Mesh_Face* n = new Mesh_Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh_Face::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh.Face)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mesh_Face, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mesh_Face*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(a_, c_);

#undef ZR_HELPER_
#undef ZR_

}

bool Mesh_Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 a = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // optional uint32 b = 2;
      case 2: {
        if (tag == 16) {
         parse_b:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // optional uint32 c = 3;
      case 3: {
        if (tag == 24) {
         parse_c:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh.Face)
  return false;
#undef DO_
}

void Mesh_Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh.Face)
  // optional uint32 a = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->a(), output);
  }

  // optional uint32 b = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->b(), output);
  }

  // optional uint32 c = 3;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c(), output);
  }

  // @@protoc_insertion_point(serialize_end:Mesh.Face)
}

::google::protobuf::uint8* Mesh_Face::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh.Face)
  // optional uint32 a = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->a(), target);
  }

  // optional uint32 b = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->b(), target);
  }

  // optional uint32 c = 3;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Mesh.Face)
  return target;
}

size_t Mesh_Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh.Face)
  size_t total_size = 0;

  // optional uint32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->a());
  }

  // optional uint32 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  // optional uint32 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->c());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh_Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mesh_Face* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh_Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh.Face)
    UnsafeMergeFrom(*source);
  }
}

void Mesh_Face::MergeFrom(const Mesh_Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh.Face)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mesh_Face::UnsafeMergeFrom(const Mesh_Face& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
}

void Mesh_Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh_Face::CopyFrom(const Mesh_Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh.Face)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mesh_Face::IsInitialized() const {

  return true;
}

void Mesh_Face::Swap(Mesh_Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh_Face::InternalSwap(Mesh_Face* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(c_, other->c_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh_Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_Face_descriptor_;
  metadata.reflection = Mesh_Face_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kNameFieldNumber;
const int Mesh::kVertexFieldNumber;
const int Mesh::kFaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_data_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh)
}

void Mesh::InitAsDefaultInstance() {
}

Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Mesh)
}

void Mesh::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_descriptor_;
}

const Mesh& Mesh::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mesh> Mesh_default_instance_;

Mesh* Mesh::New(::google::protobuf::Arena* arena) const {
  Mesh* n = new Mesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertex_.Clear();
  face_.Clear();
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Mesh.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertex;
        break;
      }

      // repeated .Mesh.Vertex vertex = 2;
      case 2: {
        if (tag == 18) {
         parse_vertex:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_vertex;
        if (input->ExpectTag(26)) goto parse_loop_face;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Mesh.Face face = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_face()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_face;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Mesh.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Mesh.Vertex vertex = 2;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertex(i), output);
  }

  // repeated .Mesh.Face face = 3;
  for (unsigned int i = 0, n = this->face_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->face(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Mesh)
}

::google::protobuf::uint8* Mesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Mesh.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Mesh.Vertex vertex = 2;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->vertex(i), false, target);
  }

  // repeated .Mesh.Face face = 3;
  for (unsigned int i = 0, n = this->face_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->face(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .Mesh.Vertex vertex = 2;
  {
    unsigned int count = this->vertex_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertex(i));
    }
  }

  // repeated .Mesh.Face face = 3;
  {
    unsigned int count = this->face_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->face(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh)
    UnsafeMergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mesh::UnsafeMergeFrom(const Mesh& from) {
  GOOGLE_DCHECK(&from != this);
  vertex_.MergeFrom(from.vertex_);
  face_.MergeFrom(from.face_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mesh::IsInitialized() const {

  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  name_.Swap(&other->name_);
  vertex_.UnsafeArenaSwap(&other->vertex_);
  face_.UnsafeArenaSwap(&other->face_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_descriptor_;
  metadata.reflection = Mesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mesh_Vertex

// optional float x = 1;
void Mesh_Vertex::clear_x() {
  x_ = 0;
}
float Mesh_Vertex::x() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.x)
  return x_;
}
void Mesh_Vertex::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.x)
}

// optional float y = 2;
void Mesh_Vertex::clear_y() {
  y_ = 0;
}
float Mesh_Vertex::y() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.y)
  return y_;
}
void Mesh_Vertex::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.y)
}

// optional float z = 3;
void Mesh_Vertex::clear_z() {
  z_ = 0;
}
float Mesh_Vertex::z() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.z)
  return z_;
}
void Mesh_Vertex::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.z)
}

// optional float i = 4;
void Mesh_Vertex::clear_i() {
  i_ = 0;
}
float Mesh_Vertex::i() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.i)
  return i_;
}
void Mesh_Vertex::set_i(float value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.i)
}

// optional float j = 5;
void Mesh_Vertex::clear_j() {
  j_ = 0;
}
float Mesh_Vertex::j() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.j)
  return j_;
}
void Mesh_Vertex::set_j(float value) {
  
  j_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.j)
}

// optional float k = 7;
void Mesh_Vertex::clear_k() {
  k_ = 0;
}
float Mesh_Vertex::k() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.k)
  return k_;
}
void Mesh_Vertex::set_k(float value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.k)
}

// optional float u = 8;
void Mesh_Vertex::clear_u() {
  u_ = 0;
}
float Mesh_Vertex::u() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.u)
  return u_;
}
void Mesh_Vertex::set_u(float value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.u)
}

// optional float v = 9;
void Mesh_Vertex::clear_v() {
  v_ = 0;
}
float Mesh_Vertex::v() const {
  // @@protoc_insertion_point(field_get:Mesh.Vertex.v)
  return v_;
}
void Mesh_Vertex::set_v(float value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Vertex.v)
}

inline const Mesh_Vertex* Mesh_Vertex::internal_default_instance() {
  return &Mesh_Vertex_default_instance_.get();
}
// -------------------------------------------------------------------

// Mesh_Face

// optional uint32 a = 1;
void Mesh_Face::clear_a() {
  a_ = 0u;
}
::google::protobuf::uint32 Mesh_Face::a() const {
  // @@protoc_insertion_point(field_get:Mesh.Face.a)
  return a_;
}
void Mesh_Face::set_a(::google::protobuf::uint32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Face.a)
}

// optional uint32 b = 2;
void Mesh_Face::clear_b() {
  b_ = 0u;
}
::google::protobuf::uint32 Mesh_Face::b() const {
  // @@protoc_insertion_point(field_get:Mesh.Face.b)
  return b_;
}
void Mesh_Face::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Face.b)
}

// optional uint32 c = 3;
void Mesh_Face::clear_c() {
  c_ = 0u;
}
::google::protobuf::uint32 Mesh_Face::c() const {
  // @@protoc_insertion_point(field_get:Mesh.Face.c)
  return c_;
}
void Mesh_Face::set_c(::google::protobuf::uint32 value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:Mesh.Face.c)
}

inline const Mesh_Face* Mesh_Face::internal_default_instance() {
  return &Mesh_Face_default_instance_.get();
}
// -------------------------------------------------------------------

// Mesh

// optional string name = 1;
void Mesh::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mesh::name() const {
  // @@protoc_insertion_point(field_get:Mesh.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mesh.name)
}
void Mesh::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mesh.name)
}
void Mesh::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mesh.name)
}
::std::string* Mesh::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Mesh.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mesh::release_name() {
  // @@protoc_insertion_point(field_release:Mesh.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mesh::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Mesh.name)
}

// repeated .Mesh.Vertex vertex = 2;
int Mesh::vertex_size() const {
  return vertex_.size();
}
void Mesh::clear_vertex() {
  vertex_.Clear();
}
const ::Mesh_Vertex& Mesh::vertex(int index) const {
  // @@protoc_insertion_point(field_get:Mesh.vertex)
  return vertex_.Get(index);
}
::Mesh_Vertex* Mesh::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:Mesh.vertex)
  return vertex_.Mutable(index);
}
::Mesh_Vertex* Mesh::add_vertex() {
  // @@protoc_insertion_point(field_add:Mesh.vertex)
  return vertex_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mesh_Vertex >*
Mesh::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:Mesh.vertex)
  return &vertex_;
}
const ::google::protobuf::RepeatedPtrField< ::Mesh_Vertex >&
Mesh::vertex() const {
  // @@protoc_insertion_point(field_list:Mesh.vertex)
  return vertex_;
}

// repeated .Mesh.Face face = 3;
int Mesh::face_size() const {
  return face_.size();
}
void Mesh::clear_face() {
  face_.Clear();
}
const ::Mesh_Face& Mesh::face(int index) const {
  // @@protoc_insertion_point(field_get:Mesh.face)
  return face_.Get(index);
}
::Mesh_Face* Mesh::mutable_face(int index) {
  // @@protoc_insertion_point(field_mutable:Mesh.face)
  return face_.Mutable(index);
}
::Mesh_Face* Mesh::add_face() {
  // @@protoc_insertion_point(field_add:Mesh.face)
  return face_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mesh_Face >*
Mesh::mutable_face() {
  // @@protoc_insertion_point(field_mutable_list:Mesh.face)
  return &face_;
}
const ::google::protobuf::RepeatedPtrField< ::Mesh_Face >&
Mesh::face() const {
  // @@protoc_insertion_point(field_list:Mesh.face)
  return face_;
}

inline const Mesh* Mesh::internal_default_instance() {
  return &Mesh_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shader::kTypeFieldNumber;
const int Shader::kNameFieldNumber;
const int Shader::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shader::Shader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_data_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Shader)
}

void Shader::InitAsDefaultInstance() {
}

Shader::Shader(const Shader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Shader)
}

void Shader::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Shader::~Shader() {
  // @@protoc_insertion_point(destructor:Shader)
  SharedDtor();
}

void Shader::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Shader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shader_descriptor_;
}

const Shader& Shader::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Shader> Shader_default_instance_;

Shader* Shader::New(::google::protobuf::Arena* arena) const {
  Shader* n = new Shader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shader::Clear() {
// @@protoc_insertion_point(message_clear_start:Shader)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Shader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Shader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shader.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shader.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source;
        break;
      }

      // optional string source = 3;
      case 3: {
        if (tag == 26) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Shader.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Shader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Shader)
  return false;
#undef DO_
}

void Shader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Shader)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // @@protoc_insertion_point(serialize_end:Shader)
}

::google::protobuf::uint8* Shader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Shader)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Shader.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Shader)
  return target;
}

size_t Shader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shader)
  size_t total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Shader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Shader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Shader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Shader)
    UnsafeMergeFrom(*source);
  }
}

void Shader::MergeFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Shader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Shader::UnsafeMergeFrom(const Shader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void Shader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Shader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shader::CopyFrom(const Shader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Shader::IsInitialized() const {

  return true;
}

void Shader::Swap(Shader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shader::InternalSwap(Shader* other) {
  type_.Swap(&other->type_);
  name_.Swap(&other->name_);
  source_.Swap(&other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shader_descriptor_;
  metadata.reflection = Shader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shader

// optional string type = 1;
void Shader::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Shader::type() const {
  // @@protoc_insertion_point(field_get:Shader.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shader.type)
}
void Shader::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shader.type)
}
void Shader::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shader.type)
}
::std::string* Shader::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Shader.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Shader::release_type() {
  // @@protoc_insertion_point(field_release:Shader.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Shader.type)
}

// optional string name = 2;
void Shader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Shader::name() const {
  // @@protoc_insertion_point(field_get:Shader.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shader.name)
}
void Shader::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shader.name)
}
void Shader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shader.name)
}
::std::string* Shader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Shader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Shader::release_name() {
  // @@protoc_insertion_point(field_release:Shader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Shader.name)
}

// optional string source = 3;
void Shader::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Shader::source() const {
  // @@protoc_insertion_point(field_get:Shader.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Shader.source)
}
void Shader::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Shader.source)
}
void Shader::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Shader.source)
}
::std::string* Shader::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:Shader.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Shader::release_source() {
  // @@protoc_insertion_point(field_release:Shader.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Shader::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:Shader.source)
}

inline const Shader* Shader::internal_default_instance() {
  return &Shader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kMeshFieldNumber;
const int Data::kShaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_data_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data)
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  protobuf_InitDefaults_data_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Data> Data_default_instance_;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Data)
  mesh_.Clear();
  shader_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mesh mesh = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mesh;
        if (input->ExpectTag(18)) goto parse_loop_shader;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Shader shader = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_shader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_shader;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data)
  // repeated .Mesh mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mesh(i), output);
  }

  // repeated .Shader shader = 2;
  for (unsigned int i = 0, n = this->shader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shader(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Data)
  // repeated .Mesh mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mesh(i), false, target);
  }

  // repeated .Shader shader = 2;
  for (unsigned int i = 0, n = this->shader_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->shader(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data)
  size_t total_size = 0;

  // repeated .Mesh mesh = 1;
  {
    unsigned int count = this->mesh_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh(i));
    }
  }

  // repeated .Shader shader = 2;
  {
    unsigned int count = this->shader_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shader(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data)
    UnsafeMergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Data::UnsafeMergeFrom(const Data& from) {
  GOOGLE_DCHECK(&from != this);
  mesh_.MergeFrom(from.mesh_);
  shader_.MergeFrom(from.shader_);
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  mesh_.UnsafeArenaSwap(&other->mesh_);
  shader_.UnsafeArenaSwap(&other->shader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// repeated .Mesh mesh = 1;
int Data::mesh_size() const {
  return mesh_.size();
}
void Data::clear_mesh() {
  mesh_.Clear();
}
const ::Mesh& Data::mesh(int index) const {
  // @@protoc_insertion_point(field_get:Data.mesh)
  return mesh_.Get(index);
}
::Mesh* Data::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:Data.mesh)
  return mesh_.Mutable(index);
}
::Mesh* Data::add_mesh() {
  // @@protoc_insertion_point(field_add:Data.mesh)
  return mesh_.Add();
}
::google::protobuf::RepeatedPtrField< ::Mesh >*
Data::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:Data.mesh)
  return &mesh_;
}
const ::google::protobuf::RepeatedPtrField< ::Mesh >&
Data::mesh() const {
  // @@protoc_insertion_point(field_list:Data.mesh)
  return mesh_;
}

// repeated .Shader shader = 2;
int Data::shader_size() const {
  return shader_.size();
}
void Data::clear_shader() {
  shader_.Clear();
}
const ::Shader& Data::shader(int index) const {
  // @@protoc_insertion_point(field_get:Data.shader)
  return shader_.Get(index);
}
::Shader* Data::mutable_shader(int index) {
  // @@protoc_insertion_point(field_mutable:Data.shader)
  return shader_.Mutable(index);
}
::Shader* Data::add_shader() {
  // @@protoc_insertion_point(field_add:Data.shader)
  return shader_.Add();
}
::google::protobuf::RepeatedPtrField< ::Shader >*
Data::mutable_shader() {
  // @@protoc_insertion_point(field_mutable_list:Data.shader)
  return &shader_;
}
const ::google::protobuf::RepeatedPtrField< ::Shader >&
Data::shader() const {
  // @@protoc_insertion_point(field_list:Data.shader)
  return shader_;
}

inline const Data* Data::internal_default_instance() {
  return &Data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
